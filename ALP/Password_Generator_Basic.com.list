EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
Password_Generator_Basic.com -- emu8086 assembler version: 4.08  
 
[ 10/19/2021  --  10:52:36 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       
[   2]        :                                       ; You may customize this and other start-up templates;
[   3]        :                                       ; The location of this template is c:\emu8086\inc\0_com_template.txt
[   4]        :                                       ; ALP to demonstrate pseudo-random number generator
[   5]        :                                       org 100h
[   6]        :                                       include emu8086.inc
[   7]        :                                       ;DEFINE_PRINT_NUM_UNS ; Needed to support EMU8086 PRINT_NUM_UNS function
[   8]        :                                       ASSUME CS: CODE, DS: DATA
[   9]        :                                       
[  10]        :                                       DATA segment
[  11]        :                                       size equ 10          ; Password should be of size 10. EQU makes the variable act as a constant.
[  12]        :                                       DATA ends
[  13]        :                                       
[  14]        :                                       CODE segment
[  15]    0100: B1 0A                                 mov cl, size         ; Loop instruction reduces value in CX register after every iteration. Hence, counter value has to be set in CX
[  16]        :                                       
[  17]    0102:                                       GENERATE:
[  18]    0102: 8B D9                                 mov bx, cx           ; Storing loop counter value of CX in BX register
[  19]    0104: 33 C0                                 xor ax, ax           ; xor register to itself same as zeroing register. More efficient compared to mov ax, 0
[  20]    0106: CD 1A                                 int 1ah              ; Int 1ah/ah=0 get timer ticks since midnight in CX:DX
[  21]    0108: 8B C2                                 mov ax, dx           ; Use lower 16 bits (in DX) for random value
[  22]    010A: 8B CB                                 mov cx, bx           ; Restoring loop counter from BX into CX register
[  23]        :                                       
[  24]    010C: 33 D2                                 xor dx, dx           ; Compute randval(DX) mod 126 to get num
[  25]    010E: BB 7E 00                              mov bx, 126           ;     between 0 and 125
[  26]    0111: F7 F3                                 div bx               ; Divide dx:ax by bx
[  27]    0113: 42                                    inc dx               ; DX = modulo from division
[  28]        :                                       ; Add 1 to give us # between 1 and 126 (not 0 to 125)
[  29]        :                                       
[  30]    0114: 83 FA 21                              cmp dx, 33           ; If the number (remainder) is below 33, increase it to be between 33 and 126
[  31]    0117: 72 02                                 jb INCREASE
[  32]    0119: EB 05                                 jmp DISPLAY
[  33]        :                                       
[  34]    011B:                                       INCREASE:
[  35]    011B: 83 C2 20                              add dx, 32       ; We are adding 32 as the lowest value DX can take is 1, and 33 is the least acceptable value
[  36]    011E: EB 00                                 jmp DISPLAY
[  37]        :                                       
[  38]    0120:                                       DISPLAY:
[  39]    0120: 8B C2                                 mov ax, dx       ; Move to AX to print
[  40]    0122: 50 8A C0 B4 0E CD 10 58               putc al          ; Prints out the ASCII character corresponding to the value in AL
[  41]        :                                       
[  42]    012A: E2 D6                                 LOOP GENERATE
[  43]        :                                       
[  44]        :                                       CODE ends
[  45]        :                                       
[  46]    012C: C3                                    ret
[  47]        :                                       
[  48]        :                                       
[  49]        :                                       
[  50]        :                                       
[  51]        :                                       
[  52]        :                                       
 
===================================================================================================
 




===================================================================================================
