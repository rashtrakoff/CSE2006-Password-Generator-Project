EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
Password_Generator_Basic.exe -- emu8086 assembler version: 4.08  
 
[ 10/19/2021  --  11:08:56 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ; ALP to demonstrate pseudo-random number generator
[   2]        :                                       include emu8086.inc
[   3]        :                                       #make_exe#
[   4]        :                                       ASSUME CS: CODE, DS: DATA
[   5]        :                                       
[   6]        :                                       DATA segment
[   7]        :                                       size equ 10          ; Password should be of size 10. EQU makes the variable act as a constant.
[   8]        :                                       DATA ends
[   9]        :                                       
[  10]        :                                       CODE segment
[  11]    0000: B1 0A                                 mov cl, size         ; Loop instruction reduces value in CX register after every iteration. Hence, counter value has to be set in CX
[  12]        :                                       
[  13]    0002:                                       GENERATE:
[  14]    0002: 8B D9                                 mov bx, cx           ; Storing loop counter value of CX in BX register
[  15]    0004: 33 C0                                 xor ax, ax           ; xor register to itself same as zeroing register. More efficient compared to mov ax, 0
[  16]    0006: CD 1A                                 int 1ah              ; Int 1ah/ah=0 get timer ticks since midnight in CX:DX
[  17]    0008: 8B C2                                 mov ax, dx           ; Use lower 16 bits (in DX) for random value
[  18]    000A: 8B CB                                 mov cx, bx           ; Restoring loop counter from BX into CX register
[  19]        :                                       
[  20]    000C: 33 D2                                 xor dx, dx           ; Compute randval(DX) mod 126 to get num
[  21]    000E: BB 7E 00                              mov bx, 126           ;     between 0 and 125
[  22]    0011: F7 F3                                 div bx               ; Divide dx:ax by bx
[  23]    0013: 42                                    inc dx               ; DX = modulo from division
[  24]        :                                       ; Add 1 to give us # between 1 and 126 (not 0 to 125)
[  25]        :                                       
[  26]    0014: 83 FA 21                              cmp dx, 33           ; If the number (remainder) is below 33, increase it to be between 33 and 126
[  27]    0017: 72 02                                 jb INCREASE
[  28]    0019: EB 05                                 jmp DISPLAY
[  29]        :                                       
[  30]    001B:                                       INCREASE:
[  31]    001B: 83 C2 20                              add dx, 32       ; We are adding 32 as the lowest value DX can take is 1, and 33 is the least acceptable value
[  32]    001E: EB 00                                 jmp DISPLAY
[  33]        :                                       
[  34]    0020:                                       DISPLAY:
[  35]    0020: 8B C2                                 mov ax, dx       ; Move to AX to print
[  36]    0022: 50 8A C0 B4 0E CD 10 58               putc al          ; Prints out the ASCII character corresponding to the value in AL
[  37]        :                                       
[  38]    002A: E2 D6                                 LOOP GENERATE
[  39]        :                                       
[  40]        :                                       CODE ends
[  41]        :                                       
[  42]        :                                       END
[  43]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 2C      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 00      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: 20      -   check sum (l.byte)
0013: D3      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 00      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E to 01FF  -   reserved relocation area  (00) 




===================================================================================================
